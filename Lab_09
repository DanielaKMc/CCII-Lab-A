//1. Se pide escribir una función utilizando plantillas que tome tres argumentos genéricos y devuelva el menor y el máximo de ellos como valor de retorno. La función debe ser capaz de dar este tipo de resultados.

//number.cpp
#include <iostream>
#include "number.h"

using namespace std;

int main(){
	int e1,e2,e3;
	float d1,d2,d3;
	cout<<"Ingrese 3 numeros enteros:"<<endl;
	cin>>e1;
	cin>>e2;
	cin>>e3;
	cout<<endl;
	cout<<"Ingrese 3 decimales:"<<endl;
	cin>>d1;
	cin>>d2;
	cin>>d3;
	cout<<endl;
	number<int> Ln(e1,e2,e3);
	number<float> Ln2(d1,d2,d3);
	cout<<"El menor valor entero es: "<<Ln.mnr()<<endl;
	cout<<"El mayor valor entero es: "<<Ln.myr()<<endl;
	cout<<"El menor valor decimal es: "<<Ln2.mnr()<<endl;
	cout<<"El mayor valor decimal es: "<<Ln2.myr()<<endl;
	return 0;
}

//number.h
#include<iostream>

using namespace std;

template <typename Dato>
class number{
private:
	Dato n1;
	Dato n2;
	Dato n3;
public:
	number(Dato n1,Dato n2,Dato n3){
		this->n1=n1;
		this->n2=n2;
		this->n3=n3;
	};
	~number(){};
	Dato myr(){
		Dato max;
		max=n1;
		if(n2>=n1){
			max=n2;
		}
		if(n3>=n1){
			max=n3;
		}
		return max;
	};
		Dato mnr(){
			Dato min;
			min=n1;
			if(n2<=n1){
				min=n2;
			}
			if(n3<=n1){
				min=n3;
			}
			return min;
		};
};


//2. Se pide escribir una función utilizando plantillas que tome dos argumentos genéricos de tipo entero y flotante que devuelva las cuatro operaciones básicas.

//calculator.cpp
#include "calculator.h"
#include <iostream>

using namespace std;

int main(){
	while(true){
	    char opr;
	    cout<<"Indique el tipo de dato según el número que se muestra:"<<endl;
	    cout<<"1. Entero."<<endl;
	    cout<<"2. Flotante."<<endl;
	    cout<<"3. Salir."<<endl;
	    cin>>opr;
	    if(opr=='1'){
	    	int x,y;
	    	cout<<"Indique el primer número:"<<endl;
	    	cin>>x;
	    	cout<<"Indique el segundo número:"<<endl;
	    	cin>>y;
	    	calculator<int> entero(x,y);
	    	while(true){
	    		int operacion;
	    		cout<<"Indique la operación que desee realizar:"<<endl;
	    		cout<<"1. Sumar."<<endl;
	    		cout<<"2. Restar."<<endl;
	    		cout<<"3. Multiplicar."<<endl;
	    		cout<<"4. Dividir."<<endl;
	    		cout<<"5. Salir."<<endl;
	    		cin>>operacion;
	    		if(operacion==1){
	    			cout<<"El resultado de la suma es: "<<entero.sum()<<endl;
	    		}
	    		else if(operacion==2){
	    			cout<<"El resultado de la resta es: "<<entero.sub()<<endl;
	    		}
	    		else if(operacion==3){
	    			cout<<"El resultado de la multilplicación es: "<<entero.mul()<<endl;
	    		}
	    		else if(operacion==4){
	    			cout<<"El resultado de la división es: "<<entero.div()<<endl;
	    		}
	    		else if(operacion==5){
	    			break;
	    		}
	    		else{
	    			cout<<"Vuelva a intentarlo."<<endl;
	    		}
	    	}
	    }
	    else if(opr=='2'){
	    	float x,y;
	    	cout<<"Indique el primer número:"<<endl;
	    	cin>>x;
	    	cout<<"Indique el segundo número:"<<endl;
	    	cin>>y;
	    	calculator<float> decimal(x,y);
	    	while(true){
	    		int operacion;
	    		cout<<"Indique la operación que desee realizar:"<<endl;
	    		cout<<"1. Sumar."<<endl;
	    		cout<<"2. Restar."<<endl;
	    		cout<<"3. Multiplicar."<<endl;
	    		cout<<"4. Dividir."<<endl;
	    		cout<<"5. Salir."<<endl;
	    		cin>>operacion;
	    		if(operacion==1){
	    			cout<<"El resultado de la suma es: "<<decimal.sum()<<endl;
	    		}
	    		else if(operacion==2){
	    			cout<<"El resultado de la resta es: "<<decimal.sub()<<endl;
	    		}
	    		else if(operacion==3){
	    			cout<<"El resultado de la multiplicación: "<<decimal.mul()<<endl;
	    		}
	    		else if(operacion==4){
	    			cout<<"El resultado de la división es: "<<decimal.div()<<endl;
	    		}
	    		else if(operacion==5){
	    			break;
	    		}
	    		else{
	    			cout<<"Vuelva a intentarlo."<<endl;
	    		}
	    	}
	    }
	    else if(opr=='3'){
	    	break;
	    }
	    else{
	    	cout<<"Vuelva a intentarlo."<<endl;
	    	main();
	    }
    }
}


//calculator.h
#include<iostream>

using namespace std;

template <typename num>
class calculator{
private:
    num n1;
    num n2;
public:
    calculator(num n1,num n2){
    	this->n1=n1;
    	this->n2=n2;
    };
    ~calculator(){};
    num sum(){
    	num rst;
    	rst=n1+n2;
    	return rst;
    };
    	num sub(){
    		num rst;
    		num max=n1;
    		if(n2>max){
    			max=n2;
    			rst=max-n1;
    			return rst;
    		}
    		else{
    			rst=max-n2;
    			return rst;
    		}
    	};
    		num mul(){
    			num rst;
    			rst=n1*n2;
    			return rst;
    		};
    			num div(){
    				num rst;
    				num max=n1;
    				if(n2>max){
    					max=n2;
    					rst=max/n1;
    					return rst;
    				}
    				else{
    					rst=max/n2;
    					return rst;
    				}
    			}
};


//3. Se pide escribir una función utilizando plantillas que tome dos valores genéricos de tipo char y string (5 veces); char corresponde a una letra y string corresponde al apellido. El programa debe mostrar por pantalla el siguiente formato de correo electrónico: char/string@unsa.edu.pe.


//4. Implemente un programa que haga uso de plantillas para determinar el mínimo y máximo valor de un arreglo de elementos dado. Debe de existir dos funciones, la primera que retorne el mayor de los valores y la segunda que retorne el menor de los valores. Asimismo, en la función main, se hace una prueba de estas funciones, con arreglos de enteros y flotantes.
//   int ArrayEntero [5] = {10,7,2, 8, 6};
//   float ArrayFloat [5] = {12.1, 8.7, 5.6, 8.4, 1.2};

#include <iostream>
#include <cmath>
#include <list>

using namespace std;

template <class T>
T valueMnr(T n[5]){
    T mn=n[0];
    for(int i=0; i<5; i++){
        if(n[i]<=mn){
            mn=n[i];
        }
    }
    return mn;
}

template <class T>
T valueMyr(T n[5]){
    T my=n[0];
    for(int i=0; i<5; i++){
        if(n[i]>=my){
            my=n[i];
        }
    }
    return my;
}

int main(){
    int ArrayEntero[5]={10,7,2,8,6};
    float ArrayFloat[5]={12.1,8.7,5.6,8.4,1.2};
    cout<<"El valor mínimo del arreglo entero es: "<<valueMnr<int>(ArrayEntero)<<endl;
    cout<<"El valor máximo del arreglo entero es: "<<valueMyr<int>(ArrayEntero)<<endl;
    cout<<"El valor mínimo del arreglo float es: "<<valueMnr<float>(ArrayFloat)<<endl;
    cout<<"El valor máximo del arreglo float es: "<<valueMyr<float>(ArrayFloat)<<endl;
    return 0;
}


//5. Realizar la implementación de un programa que haga uso de plantillas, para elaborar una función que permita ordenar ascendentemente y descendentemente los elementos de un arreglo de valores enteros y otro arreglo de valores flotantes. Las funciones deben recibir como parámetros, un puntero al tipo de elemento dado, y dos enteros que indican los índices del primero y último elemento.
//   int ArrayEntero [5] = {5,7,2,8,6,1,3,4,9};
//   float ArrayFloat [5] = {10.1, 8.4, 3.6, 4.4, 11.2};

#include<iostream>
#include<cmath>
#include<list>

using namespace std;

template <class T>
void asc(T L[5]){
    T a;
    for(int f=0; f<=4; f++){
        for(int fx=f; fx<=4; fx+=1){
            if(L[f]>L[fx]){
                a=L[f];
                L[f]=L[fx];
                L[fx]=a;
            }
        }
    }
    for(int f=0; f<5; f++){
        cout<<L[f]<<" ";
    }
}

template <class T>
void des(T L[5]){
    T a;
    for(int f=0; f<=4; f++){
        for(int fx=f; fx<=4; fx+=1){
            if (L[f]>L[fx]){
                a=L[f];
                L[f]=L[fx];
                L[fx]=a;
            }
        }
    }
    T L2[5];
    int aux=0;
    for(int f=4; f>=0; f--){
        L2[aux]=L[f];
        aux++;
    }
    for(int f=0; f<5; f++){
        cout<<L2[f]<<" ";
    }
}

int main(){
    int ArrayEntero[5]={5,7,2,8,6};
    float ArrayFloat[5]={10.1,8.4,3.6,4.4,11.2};
    cout<<"El arreglo entero ordenado de forma ascendente y descendente respectivamente es: "<<endl;
    asc<int>(ArrayEntero);
    cout<<endl;
    des<int>(ArrayEntero);
    cout<<endl;
    cout<<"El arreglo float ordenado de forma ascendente y descendente respectivamente es: "<<endl;
    asc<float>(ArrayFloat);
    cout<<endl;
    des<float>(ArrayFloat);
    return 0;
}
